package main

import "fmt"
import "html/template"
import "os"

type RuntimeContainer struct {
    ID        string
    Addresses []Address
    Gateway   string
    Name      string
    Image     DockerImage
    Env       map[string]string
    Volumes   map[string]Volume
}

type Address struct {
    IP       string
    Port     string
    HostPort string
    Proto    string
}

type DockerImage struct {
    Registry   string
    Repository string
    Tag        string
}

type Volume struct {
    Path      string
    HostPath  string
    ReadWrite bool
}

var x = `{{define "content"}}
#!/usr/bin/python
from docker import Client

dockerCli = Client(base_url='unix://var/run/docker.sock')

# For every virtual host defined

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

	{{ maxTag := -1 }}
	
	# For every container inside that host
	{{ range $container := $containers }}
		{{ if $container.Image.Tag &&  reflect.ValueOf($container.Image.Tag).Type() = "Integer" && strconv.Atoi($container.Image.Tag) > $maxTag}}
			{{	maxTag := $container.Image.Tag }}
		{{ end }}
	{{end}}

	{{ if $container.Image.Tag > -1 }}
		{{ range $container := $containers }}
			{{ if $container.Image.Tag != $maxTag }}
				# Stop this container, but allow it to exit gracefully (T= 1 hour)
				dockerCli.stop("{{ $container.ID }}", 60*60)
			{{ end }}
		{{ end }}
	{{ end }}
	
{{end}}
{{end}}`

func main() {

	pagedata := &Page{Tags:&Tags{Id:1, Name:"golang"},
			Content: &Content{Id:9, Title:"Hello", Content:"World!"},
    			Comment: &Comment{Id:2, Note:"Good Day!"}}
	
	tmpl := template.New("x")
	tmpl.Execute(os.Stdout, pagedata)

}